import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class StatusPesananPage extends StatefulWidget {
  @override
  _StatusPesananPageState createState() => _StatusPesananPageState();
}

class _StatusPesananPageState extends State<StatusPesananPage> {
  int _selectedIndex = 0;
  final List<String> _categories = ['Makanan', 'Mart', 'Keuangan', 'Express'];
  late Future<List<dynamic>> _pesananFuture;

  @override
  void initState() {
    super.initState();
    _pesananFuture = fetchPesanan(); // Panggil fungsi fetchPesanan saat init
  }
  
void _showOrderDetailsModal(BuildContext context, String orderId) {
  showModalBottomSheet(
    context: context,
    builder: (BuildContext context) {
      return FutureBuilder<Map<String, dynamic>>(
        future: fetchOrderDetails(orderId), // Fetch order details using the orderId
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error loading order details'));
          } else if (!snapshot.hasData) {
            return Center(child: Text('No details available'));
          }

          final orderData = snapshot.data!;

          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Order ID: ${orderData['id']}', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Text('Nama: ${orderData['nama_lengkap']}'),
                Text('Alamat: ${orderData['alamat']}'),
                Text('Total: Rp${orderData['alt_total']}'),
                // Display item list
                SizedBox(height: 12),
                Text('Items:', style: TextStyle(fontWeight: FontWeight.bold)),
                ...orderData['data_item_menu'].map<Widget>((item) {
                  return ListTile(
                    title: Text('${item['nama_item_menu']} (${item['kuantitas']})'),
                    subtitle: Text('Subtotal: Rp${item['alt_subtotal']}'),
                  );
                }).toList(),
              ],
            ),
          );
        },
      );
    },
  );
}Future<String?> _checkTransactionStatus(String orderId) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String? token = prefs.getString('sanctumToken');

  if (token == null) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Token tidak ditemukan.')),
    );
    return null;
  }

  try {
    final response = await http.get(
      Uri.parse('https://loka-mart.demoaplikasi.web.id/api/v1/pesanan/cek-status-transaksi-midtrans/$orderId'),
      headers: {
        'Authorization': 'Bearer $token',
        'Accept': 'application/json',
      },
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      String transactionStatus = data['status']['transaction_status'];
      String paymentType = data['status']['payment_type'];

      if (transactionStatus == 'settlement') {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Pembayaran telah diterima.')),
        );
        Navigator.pushNamed(context, '/pesanan');
      } else if (transactionStatus == 'pending') {
        if (paymentType == 'gopay') {
          // Hanya munculkan snackbar jika payment_type adalah gopay
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Transaksi GoPay dalam status pending.')),
          );
        } else if (paymentType == 'bank_transfer') {
          Navigator.pushNamed(
            context,
            '/detailpembayaranstatus',
            arguments: {
              'orderId': data['status']['order_id'],
              'grossAmount': data['status']['gross_amount'],
              'paymentType': paymentType,
              'expiryTime': data['status']['expiry_time'],
              'paymentDisplayName': data['status']['va_numbers'][0]['bank'].toUpperCase(),
              'vaNumber': data['status']['va_numbers'][0]['va_number'],
            },
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Pembayaran pending.')),
          );
          Navigator.pushNamed(
            context,
            '/detailpembayaranstatus',
            arguments: {
              'orderId': data['status']['order_id'],
              'transactionStatus': transactionStatus,
              'transactionTime': data['status']['transaction_time'],
              'grossAmount': data['status']['gross_amount'],
              'paymentType': paymentType,
              'expiryTime': data['status']['expiry_time'],
              'billerCode': data['status']['biller_code'],
              'billKey': data['status']['bill_key'],
            },
          );
        }
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Status transaksi: $transactionStatus')),
        );
      }
      return transactionStatus;
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Gagal mengambil status transaksi.')),
      );
    }
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Terjadi kesalahan saat mengambil status transaksi.')),
    );
  }

  return null;
}

// Fetch order details function
Future<Map<String, dynamic>> fetchOrderDetails(String orderId) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String? token = prefs.getString('sanctumToken');

  final response = await http.get(
    Uri.parse('https://loka-mart.demoaplikasi.web.id/api/v1/pesanan/detail/$orderId'),
    headers: {
      'Authorization': 'Bearer $token',
      'Accept': 'application/json',
    },
  );

  if (response.statusCode == 200) {
    return jsonDecode(response.body)['data'];
  } else {
    throw Exception('Failed to load order details');
  }
}

  Future<List<dynamic>> fetchPesanan() async {
    // Ganti dengan endpoint yang sesuai
     SharedPreferences prefs = await SharedPreferences.getInstance();
  String? token = prefs.getString('sanctumToken');
  if (token == null) {
    print('Token tidak ditemukan');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Token tidak ditemukan.')),
    );
  }

      final response = await http.get(
        Uri.parse('https://loka-mart.demoaplikasi.web.id/api/v1/pesanan'),
        headers: {
          'Authorization': 'Bearer $token',
          'Accept': 'application/json',
        },
      );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return data['data']; // Kembalikan array data pesanan
    } else {
      throw Exception('Gagal mengambil data pesanan');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Text('Riwayat Aktivitas', style: TextStyle(color: Colors.black, fontSize: 18)),
        backgroundColor: Colors.white,
        elevation: 0,
      ),
      body: Column(
        children: [
          SizedBox(height: 10),
          _buildCategoryButtons(),
          SizedBox(height: 10),
          Expanded(
  child: FutureBuilder<List<dynamic>>(
    future: _pesananFuture,
    builder: (context, snapshot) {
      if (snapshot.connectionState == ConnectionState.waiting) {
        return Center(child: CircularProgressIndicator());
      } else if (snapshot.hasError) {
        return Center(child: Text('Gagal mengambil data'));
      } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
        return Center(child: Text('Tidak ada pesanan'));
      }

      final pesananList = snapshot.data!;
      return ListView.builder(
        itemCount: pesananList.length,
        itemBuilder: (context, index) {
          final pesanan = pesananList[index];

          return GestureDetector(
            onTap: () {
              // Navigasi ke halaman detailpembayaranstatus dengan membawa id pesanan
              Navigator.pushNamed(
                context,
                '/detailpembayaranstatus',
                arguments: pesanan['id_order'], // Ganti dengan field yang menyimpan ID order
              );
            },
            child: _buildOrderItem(
              pesanan['kode'], // title
              pesanan['alamat'] ?? '', // subtitle
              pesanan['status_pesanan'], // status pesanan (bisa jadi date)
              'Rp${pesanan['alt_total']}', // price
              '+${pesanan['total']}', // points
            ),
          );
        },
      );
    },
  ),
)

        ],
      ),
    );
  }

  Widget _buildCategoryButtons() {
    return Container(
      height: 40,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _categories.length,
        itemBuilder: (context, index) {
          return Padding(
            padding: EdgeInsets.symmetric(horizontal: 4),
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                foregroundColor: _selectedIndex == index ? Colors.white : Colors.black,
                backgroundColor: _selectedIndex == index ? Color(0xFF006D3B) : Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
                elevation: 0,
                side: BorderSide(color: _selectedIndex == index ? Colors.transparent : Colors.grey.shade300),
              ),
              onPressed: () {
                setState(() {
                  _selectedIndex = index;
                });
              },
              child: Text(_categories[index], style: TextStyle(fontSize: 14)),
            ),
          );
        },
      ),
    );
  }
Widget _buildOrderItem(String title, String subtitle, String date, String price, String points) {
  // Variabel tambahan untuk melacak status pembayaran
  bool isPaid = false;

  return Container(
    margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                color: Colors.green.shade100,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(Icons.restaurant, color: Colors.green, size: 24),
            ),
            SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(title, style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
                      Text(price, style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
                    ],
                  ),
                  SizedBox(height: 4),
                  Text(subtitle, style: TextStyle(fontSize: 14, color: Colors.grey[600])),
                  SizedBox(height: 4),
                  Text(date, style: TextStyle(fontSize: 14, color: Colors.grey)),
                  SizedBox(height: 4),
                  Text(points, style: TextStyle(fontSize: 14, color: Colors.green)),
                  SizedBox(height: 8),
                  Row(
                    children: [
                      // Check Status Button with outline style
                      Expanded(
                        child: ElevatedButton(
                         onPressed: () async {
  String? status = await _checkTransactionStatus(title); // Mengambil status transaksi
  if (status == 'pending') {
    setState(() {
      isPaid = true;
    });
  }
},

                          style: ElevatedButton.styleFrom(
                            padding: EdgeInsets.symmetric(vertical: 12),
                            side: BorderSide(color: Colors.green, width: 2),
                            backgroundColor: Colors.white,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                isPaid ? Icons.check_circle : Icons.info,
                                size: 16,
                                color: isPaid ? Colors.blue : Colors.green,
                              ),
                              SizedBox(width: 5),
                              Text(
                                // ignore: dead_code
                                isPaid ? 'Sudah Dibayar' : 'Check Status',
                                style: TextStyle(
                                  color: isPaid ? Colors.blue : Colors.green,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      SizedBox(width: 10),
                      // Detail Pesanan Button with fill color
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () {
                            _showOrderDetailsModal(context, title);
                          },
                          style: ElevatedButton.styleFrom(
                            padding: EdgeInsets.symmetric(vertical: 12),
                            backgroundColor: Colors.orange,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Text(
                            'Detail Pesanan',
                            style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
        Divider(thickness: 1, height: 16),
      ],
    ),
  );
}

}